unparsed: parsed: loSTATUS: STATHEADERS: {"content-type":"text/html","content-length":"164244","connection":"keep-alive","server":"thin 1.5.0 codename Knife"}
game joigame join status: <!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>NoMethodError at &#x2F;game&#x2F;undefined&#x2F;join</title>

  <script type="text/javascript">
  //<!--
  function toggle(id) {
    var pre  = document.getElementById("pre-" + id);
    var post = document.getElementById("post-" + id);
    var context = document.getElementById("context-" + id);

    if (pre.style.display == 'block') {
      pre.style.display = 'none';
      post.style.display = 'none';
      context.style.background = "none";
    } else {
      pre.style.display = 'block';
      post.style.display = 'block';
      context.style.background = "#fffed9";
    }
  }

  function toggleBacktrace(){
    var bt = document.getElementById("backtrace");
    var toggler = document.getElementById("expando");

    if (bt.className == 'condensed') {
      bt.className = 'expanded';
      toggler.innerHTML = "(condense)";
    } else {
      bt.className = 'condensed';
      toggler.innerHTML = "(expand)";
    }
  }
  //-->
  </script>

<style type="text/css" media="screen">
  *                   {margin: 0; padding: 0; border: 0; outline: 0;}
  div.clear           {clear: both;}
  body                {background: #EEEEEE; margin: 0; padding: 0;
                       font-family: 'Lucida Grande', 'Lucida Sans Unicode',
                       'Garuda';}
  code                {font-family: 'Lucida Console', monospace;
                       font-size: 12px;}
  li                  {height: 18px;}
  ul                  {list-style: none; margin: 0; padding: 0;}
  ol:hover            {cursor: pointer;}
  ol li               {white-space: pre;}
  #explanation        {font-size: 12px; color: #666666;
                       margin: 20px 0 0 100px;}
/* WRAP */
  #wrap               {width: 1000px; background: #FFFFFF; margin: 0 auto;
                       padding: 30px 50px 20px 50px;
                       border-left: 1px solid #DDDDDD;
                       border-right: 1px solid #DDDDDD;}
/* HEADER */
  #header             {margin: 0 auto 25px auto;}
  #header img         {float: left;}
  #header #summary    {float: left; margin: 12px 0 0 20px; width:660px;
                       font-family: 'Lucida Grande', 'Lucida Sans Unicode';}
  h1                  {margin: 0; font-size: 36px; color: #981919;}
  h2                  {margin: 0; font-size: 22px; color: #333333;}
  #header ul          {margin: 0; font-size: 12px; color: #666666;}
  #header ul li strong{color: #444444;}
  #header ul li       {display: inline; padding: 0 10px;}
  #header ul li.first {padding-left: 0;}
  #header ul li.last  {border: 0; padding-right: 0;}
/* BODY */
  #backtrace,
  #get,
  #post,
  #cookies,
  #rack               {width: 980px; margin: 0 auto 10px auto;}
  p#nav               {float: right; font-size: 14px;}
/* BACKTRACE */
  a#expando           {float: left; padding-left: 5px; color: #666666;
                      font-size: 14px; text-decoration: none; cursor: pointer;}
  a#expando:hover     {text-decoration: underline;}
  h3                  {float: left; width: 100px; margin-bottom: 10px;
                       color: #981919; font-size: 14px; font-weight: bold;}
  #nav a              {color: #666666; text-decoration: none; padding: 0 5px;}
  #backtrace li.frame-info {background: #f7f7f7; padding-left: 10px;
                           font-size: 12px; color: #333333;}
  #backtrace ul       {list-style-position: outside; border: 1px solid #E9E9E9;
                       border-bottom: 0;}
  #backtrace ol       {width: 920px; margin-left: 50px;
                       font: 10px 'Lucida Console', monospace; color: #666666;}
  #backtrace ol li    {border: 0; border-left: 1px solid #E9E9E9;
                       padding: 2px 0;}
  #backtrace ol code  {font-size: 10px; color: #555555; padding-left: 5px;}
  #backtrace-ul li    {border-bottom: 1px solid #E9E9E9; height: auto;
                       padding: 3px 0;}
  #backtrace-ul .code {padding: 6px 0 4px 0;}
  #backtrace.condensed .system,
  #backtrace.condensed .framework {display:none;}
/* REQUEST DATA */
  p.no-data           {padding-top: 2px; font-size: 12px; color: #666666;}
  table.req           {width: 980px; text-align: left; font-size: 12px;
                       color: #666666; padding: 0; border-spacing: 0;
                       border: 1px solid #EEEEEE; border-bottom: 0;
                       border-left: 0;
                       clear:both}
  table.req tr th     {padding: 2px 10px; font-weight: bold;
                       background: #F7F7F7; border-bottom: 1px solid #EEEEEE;
                       border-left: 1px solid #EEEEEE;}
  table.req tr td     {padding: 2px 20px 2px 10px;
                       border-bottom: 1px solid #EEEEEE;
                       border-left: 1px solid #EEEEEE;}
/* HIDE PRE/POST CODE AT START */
  .pre-context,
  .post-context       {display: none;}

  table td.code       {width:750px}
  table td.code div   {width:750px;overflow:hidden}
</style>
</head>
<body>
  <div id="wrap">
    <div id="header">
      <img src="/__sinatra__/500.png" alt="application error" height="161" width="313" />
      <div id="summary">
        <h1><strong>NoMethodError</strong> at <strong>&#x2F;game&#x2F;undefined&#x2F;join
          </strong></h1>
        <h2>undefined method `players&#x27; for nil:NilClass</h2>
        <ul>
          <li class="first"><strong>file:</strong> <code>
            controller.rb</code></li>
          <li><strong>location:</strong> <code>POST &#x2F;game&#x2F;:layer_id&#x2F;join
            </code></li>
          <li class="last"><strong>line:
            </strong> 585</li>
        </ul>
      </div>
      <div class="clear"></div>
    </div>

    <div id="backtrace" class='condensed'>
      <h3>BACKTRACE</h3>
      <p><a href="#" id="expando"
            onclick="toggleBacktrace(); return false">(expand)</a></p>
      <p id="nav"><strong>JUMP TO:</strong>
         <a href="#get-info">GET</a>
         <a href="#post-info">POST</a>
         <a href="#cookie-info">COOKIES</a>
         <a href="#env-info">ENV</a>
      </p>
      <div class="clear"></div>

      <ul id="backtrace-ul">

      
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;wxj&#x2F;Projects&#x2F;Location-game-orchid&#x2F;controllers&#x2F;controller.rb</code> in
                <code><strong>POST &#x2F;game&#x2F;:layer_id&#x2F;join</strong></code>
            </li>

            <li class="code app">
              
              <ol start="578"
                  class="pre-context" id="pre-1"
                  onclick="toggle(1);">
                
                <li class="pre-context-line"><code>    elsif params[:email]==nil
</code></li>
                
                <li class="pre-context-line"><code>    	return {:error=&gt;&quot;invalid email&quot;}.to_json
</code></li>
                
                <li class="pre-context-line"><code>    elsif params[:name]==nil
</code></li>
                
                <li class="pre-context-line"><code>    	return {:error=&gt;&quot;invalid name&quot;}.to_json
</code></li>
                
                <li class="pre-context-line"><code>    elsif params[:initials]==nil
</code></li>
                
                <li class="pre-context-line"><code>    	return {:error=&gt;&quot;invalid initials&quot;}.to_json
</code></li>
                
                <li class="pre-context-line"><code>    else
</code></li>
                
              </ol>
              

              <ol start="585" class="context" id="1"
                  onclick="toggle(1);">
                <li class="context-line" id="context-1"><code>        player = game.players.create  :initials =&gt; params[:initials], </code></li>
              </ol>

              
              <ol start="586" class="post-context"
                  id="post-1" onclick="toggle(1);">
                
                <li class="post-context-line"><code>					:name =&gt; params[:name], 
</code></li>
                
                <li class="post-context-line"><code>					:skill =&gt; params[:role_id], 
</code></li>
                
                <li class="post-context-line"><code>					:team=&gt;game.pick_team(&quot;runner&quot;), #team is a legacy
</code></li>
                
                <li class="post-context-line"><code>					:latitude =&gt; game.sim_lat,
</code></li>
                
                <li class="post-context-line"><code>					:longitude =&gt; game.sim_lng 
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>      
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1144"
                  class="pre-context" id="pre-2"
                  onclick="toggle(2);">
                
                <li class="pre-context-line"><code>        define_method(method_name, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        unbound_method          = instance_method method_name
</code></li>
                
                <li class="pre-context-line"><code>        pattern, keys           = compile(path)
</code></li>
                
                <li class="pre-context-line"><code>        conditions, @conditions = @conditions, []
</code></li>
                
                <li class="pre-context-line"><code>        remove_method method_name
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        [ block.arity != 0 ?
</code></li>
                
              </ol>
              

              <ol start="1151" class="context" id="2"
                  onclick="toggle(2);">
                <li class="context-line" id="context-2"><code>            proc { unbound_method.bind(self).call(*@block_params) } :</code></li>
              </ol>

              
              <ol start="1152" class="post-context"
                  id="post-2" onclick="toggle(2);">
                
                <li class="post-context-line"><code>            proc { unbound_method.bind(self).call },
</code></li>
                
                <li class="post-context-line"><code>          pattern, keys, conditions ]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def compile(path)
</code></li>
                
                <li class="post-context-line"><code>        keys = []
</code></li>
                
                <li class="post-context-line"><code>        if path.respond_to? :to_str
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>compile!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1144"
                  class="pre-context" id="pre-3"
                  onclick="toggle(3);">
                
                <li class="pre-context-line"><code>        define_method(method_name, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        unbound_method          = instance_method method_name
</code></li>
                
                <li class="pre-context-line"><code>        pattern, keys           = compile(path)
</code></li>
                
                <li class="pre-context-line"><code>        conditions, @conditions = @conditions, []
</code></li>
                
                <li class="pre-context-line"><code>        remove_method method_name
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        [ block.arity != 0 ?
</code></li>
                
              </ol>
              

              <ol start="1151" class="context" id="3"
                  onclick="toggle(3);">
                <li class="context-line" id="context-3"><code>            proc { unbound_method.bind(self).call(*@block_params) } :</code></li>
              </ol>

              
              <ol start="1152" class="post-context"
                  id="post-3" onclick="toggle(3);">
                
                <li class="post-context-line"><code>            proc { unbound_method.bind(self).call },
</code></li>
                
                <li class="post-context-line"><code>          pattern, keys, conditions ]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def compile(path)
</code></li>
                
                <li class="post-context-line"><code>        keys = []
</code></li>
                
                <li class="post-context-line"><code>        if path.respond_to? :to_str
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>instance_eval</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="717"
                  class="pre-context" id="pre-4"
                  onclick="toggle(4);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      route_eval(&amp;pass_block) if pass_block
</code></li>
                
                <li class="pre-context-line"><code>      route_missing
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run a route block and throw :halt with the result.
</code></li>
                
                <li class="pre-context-line"><code>    def route_eval(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="724" class="context" id="4"
                  onclick="toggle(4);">
                <li class="context-line" id="context-4"><code>      throw :halt, instance_eval(&amp;block)</code></li>
              </ol>

              
              <ol start="725" class="post-context"
                  id="post-4" onclick="toggle(4);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # If the current request matches pattern and conditions, fill params
</code></li>
                
                <li class="post-context-line"><code>    # with keys and call the given block.
</code></li>
                
                <li class="post-context-line"><code>    # Revert params afterwards.
</code></li>
                
                <li class="post-context-line"><code>    #
</code></li>
                
                <li class="post-context-line"><code>    # Returns pass block.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>route_eval</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="717"
                  class="pre-context" id="pre-5"
                  onclick="toggle(5);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      route_eval(&amp;pass_block) if pass_block
</code></li>
                
                <li class="pre-context-line"><code>      route_missing
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run a route block and throw :halt with the result.
</code></li>
                
                <li class="pre-context-line"><code>    def route_eval(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="724" class="context" id="5"
                  onclick="toggle(5);">
                <li class="context-line" id="context-5"><code>      throw :halt, instance_eval(&amp;block)</code></li>
              </ol>

              
              <ol start="725" class="post-context"
                  id="post-5" onclick="toggle(5);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # If the current request matches pattern and conditions, fill params
</code></li>
                
                <li class="post-context-line"><code>    # with keys and call the given block.
</code></li>
                
                <li class="post-context-line"><code>    # Revert params afterwards.
</code></li>
                
                <li class="post-context-line"><code>    #
</code></li>
                
                <li class="post-context-line"><code>    # Returns pass block.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="701"
                  class="pre-context" id="pre-6"
                  onclick="toggle(6);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block=nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
                <li class="pre-context-line"><code>          pass_block = process_route(pattern, keys, conditions) do
</code></li>
                
              </ol>
              

              <ol start="708" class="context" id="6"
                  onclick="toggle(6);">
                <li class="context-line" id="context-6"><code>            route_eval(&amp;block)</code></li>
              </ol>

              
              <ol start="709" class="post-context"
                  id="post-6" onclick="toggle(6);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Run routes defined in superclass.
</code></li>
                
                <li class="post-context-line"><code>      if base.superclass.respond_to?(:routes)
</code></li>
                
                <li class="post-context-line"><code>        return route!(base.superclass, pass_block)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>process_route</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="751"
                  class="pre-context" id="pre-7"
                  onclick="toggle(7);">
                
                <li class="pre-context-line"><code>            {}
</code></li>
                
                <li class="pre-context-line"><code>          end
</code></li>
                
                <li class="pre-context-line"><code>        @params = @original_params.merge(params)
</code></li>
                
                <li class="pre-context-line"><code>        @block_params = values
</code></li>
                
                <li class="pre-context-line"><code>        catch(:pass) do
</code></li>
                
                <li class="pre-context-line"><code>          conditions.each { |cond|
</code></li>
                
                <li class="pre-context-line"><code>            throw :pass if instance_eval(&amp;cond) == false }
</code></li>
                
              </ol>
              

              <ol start="758" class="context" id="7"
                  onclick="toggle(7);">
                <li class="context-line" id="context-7"><code>          yield</code></li>
              </ol>

              
              <ol start="759" class="post-context"
                  id="post-7" onclick="toggle(7);">
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = @original_params
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # No matching route was found or all routes passed. The default
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="748"
                  class="pre-context" id="pre-8"
                  onclick="toggle(8);">
                
                <li class="pre-context-line"><code>          elsif values.any?
</code></li>
                
                <li class="pre-context-line"><code>            {&#x27;captures&#x27; =&gt; values}
</code></li>
                
                <li class="pre-context-line"><code>          else
</code></li>
                
                <li class="pre-context-line"><code>            {}
</code></li>
                
                <li class="pre-context-line"><code>          end
</code></li>
                
                <li class="pre-context-line"><code>        @params = @original_params.merge(params)
</code></li>
                
                <li class="pre-context-line"><code>        @block_params = values
</code></li>
                
              </ol>
              

              <ol start="755" class="context" id="8"
                  onclick="toggle(8);">
                <li class="context-line" id="context-8"><code>        catch(:pass) do</code></li>
              </ol>

              
              <ol start="756" class="post-context"
                  id="post-8" onclick="toggle(8);">
                
                <li class="post-context-line"><code>          conditions.each { |cond|
</code></li>
                
                <li class="post-context-line"><code>            throw :pass if instance_eval(&amp;cond) == false }
</code></li>
                
                <li class="post-context-line"><code>          yield
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = @original_params
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>process_route</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="748"
                  class="pre-context" id="pre-9"
                  onclick="toggle(9);">
                
                <li class="pre-context-line"><code>          elsif values.any?
</code></li>
                
                <li class="pre-context-line"><code>            {&#x27;captures&#x27; =&gt; values}
</code></li>
                
                <li class="pre-context-line"><code>          else
</code></li>
                
                <li class="pre-context-line"><code>            {}
</code></li>
                
                <li class="pre-context-line"><code>          end
</code></li>
                
                <li class="pre-context-line"><code>        @params = @original_params.merge(params)
</code></li>
                
                <li class="pre-context-line"><code>        @block_params = values
</code></li>
                
              </ol>
              

              <ol start="755" class="context" id="9"
                  onclick="toggle(9);">
                <li class="context-line" id="context-9"><code>        catch(:pass) do</code></li>
              </ol>

              
              <ol start="756" class="post-context"
                  id="post-9" onclick="toggle(9);">
                
                <li class="post-context-line"><code>          conditions.each { |cond|
</code></li>
                
                <li class="post-context-line"><code>            throw :pass if instance_eval(&amp;cond) == false }
</code></li>
                
                <li class="post-context-line"><code>          yield
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = @original_params
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="700"
                  class="pre-context" id="pre-10"
                  onclick="toggle(10);">
                
                <li class="pre-context-line"><code>      base.filters[type].each { |block| instance_eval(&amp;block) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block=nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
              </ol>
              

              <ol start="707" class="context" id="10"
                  onclick="toggle(10);">
                <li class="context-line" id="context-10"><code>          pass_block = process_route(pattern, keys, conditions) do</code></li>
              </ol>

              
              <ol start="708" class="post-context"
                  id="post-10" onclick="toggle(10);">
                
                <li class="post-context-line"><code>            route_eval(&amp;block)
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Run routes defined in superclass.
</code></li>
                
                <li class="post-context-line"><code>      if base.superclass.respond_to?(:routes)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>each</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="699"
                  class="pre-context" id="pre-11"
                  onclick="toggle(11);">
                
                <li class="pre-context-line"><code>      filter! type, base.superclass if base.superclass.respond_to?(:filters)
</code></li>
                
                <li class="pre-context-line"><code>      base.filters[type].each { |block| instance_eval(&amp;block) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block=nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
              </ol>
              

              <ol start="706" class="context" id="11"
                  onclick="toggle(11);">
                <li class="context-line" id="context-11"><code>        routes.each do |pattern, keys, conditions, block|</code></li>
              </ol>

              
              <ol start="707" class="post-context"
                  id="post-11" onclick="toggle(11);">
                
                <li class="post-context-line"><code>          pass_block = process_route(pattern, keys, conditions) do
</code></li>
                
                <li class="post-context-line"><code>            route_eval(&amp;block)
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Run routes defined in superclass.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="699"
                  class="pre-context" id="pre-12"
                  onclick="toggle(12);">
                
                <li class="pre-context-line"><code>      filter! type, base.superclass if base.superclass.respond_to?(:filters)
</code></li>
                
                <li class="pre-context-line"><code>      base.filters[type].each { |block| instance_eval(&amp;block) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block=nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
              </ol>
              

              <ol start="706" class="context" id="12"
                  onclick="toggle(12);">
                <li class="context-line" id="context-12"><code>        routes.each do |pattern, keys, conditions, block|</code></li>
              </ol>

              
              <ol start="707" class="post-context"
                  id="post-12" onclick="toggle(12);">
                
                <li class="post-context-line"><code>          pass_block = process_route(pattern, keys, conditions) do
</code></li>
                
                <li class="post-context-line"><code>            route_eval(&amp;block)
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Run routes defined in superclass.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>dispatch!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="836"
                  class="pre-context" id="pre-13"
                  onclick="toggle(13);">
                
                <li class="pre-context-line"><code>      res
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Dispatch a request with error handling.
</code></li>
                
                <li class="pre-context-line"><code>    def dispatch!
</code></li>
                
                <li class="pre-context-line"><code>      static! if settings.static? &amp;&amp; (request.get? || request.head?)
</code></li>
                
                <li class="pre-context-line"><code>      filter! :before
</code></li>
                
              </ol>
              

              <ol start="843" class="context" id="13"
                  onclick="toggle(13);">
                <li class="context-line" id="context-13"><code>      route!</code></li>
              </ol>

              
              <ol start="844" class="post-context"
                  id="post-13" onclick="toggle(13);">
                
                <li class="post-context-line"><code>    rescue NotFound =&gt; boom
</code></li>
                
                <li class="post-context-line"><code>      handle_not_found!(boom)
</code></li>
                
                <li class="post-context-line"><code>    rescue ::Exception =&gt; boom
</code></li>
                
                <li class="post-context-line"><code>      handle_exception!(boom)
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      filter! :after unless env[&#x27;sinatra.static_file&#x27;]
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="637"
                  class="pre-context" id="pre-14"
                  onclick="toggle(14);">
                
                <li class="pre-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="pre-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
                <li class="pre-context-line"><code>      template_cache.clear if settings.reload_templates
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@request.route)
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@params)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @response[&#x27;Content-Type&#x27;] = nil
</code></li>
                
              </ol>
              

              <ol start="644" class="context" id="14"
                  onclick="toggle(14);">
                <li class="context-line" id="context-14"><code>      invoke { dispatch! }</code></li>
              </ol>

              
              <ol start="645" class="post-context"
                  id="post-14" onclick="toggle(14);">
                
                <li class="post-context-line"><code>      invoke { error_block!(response.status) }
</code></li>
                
                <li class="post-context-line"><code>      unless @response[&#x27;Content-Type&#x27;]
</code></li>
                
                <li class="post-context-line"><code>        if body.respond_to?(:to_ary) and body.first.respond_to? :content_type
</code></li>
                
                <li class="post-context-line"><code>          content_type body.first.content_type
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          content_type :html
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>instance_eval</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="801"
                  class="pre-context" id="pre-15"
                  onclick="toggle(15);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="808" class="context" id="15"
                  onclick="toggle(15);">
                <li class="context-line" id="context-15"><code>      res = catch(:halt) { instance_eval(&amp;block) }</code></li>
              </ol>

              
              <ol start="809" class="post-context"
                  id="post-15" onclick="toggle(15);">
                
                <li class="post-context-line"><code>      return if res.nil?
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      case
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_str)
</code></li>
                
                <li class="post-context-line"><code>        @response.body = [res]
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_ary)
</code></li>
                
                <li class="post-context-line"><code>        res = res.to_ary
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="801"
                  class="pre-context" id="pre-16"
                  onclick="toggle(16);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="808" class="context" id="16"
                  onclick="toggle(16);">
                <li class="context-line" id="context-16"><code>      res = catch(:halt) { instance_eval(&amp;block) }</code></li>
              </ol>

              
              <ol start="809" class="post-context"
                  id="post-16" onclick="toggle(16);">
                
                <li class="post-context-line"><code>      return if res.nil?
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      case
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_str)
</code></li>
                
                <li class="post-context-line"><code>        @response.body = [res]
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_ary)
</code></li>
                
                <li class="post-context-line"><code>        res = res.to_ary
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="801"
                  class="pre-context" id="pre-17"
                  onclick="toggle(17);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="808" class="context" id="17"
                  onclick="toggle(17);">
                <li class="context-line" id="context-17"><code>      res = catch(:halt) { instance_eval(&amp;block) }</code></li>
              </ol>

              
              <ol start="809" class="post-context"
                  id="post-17" onclick="toggle(17);">
                
                <li class="post-context-line"><code>      return if res.nil?
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      case
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_str)
</code></li>
                
                <li class="post-context-line"><code>        @response.body = [res]
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_ary)
</code></li>
                
                <li class="post-context-line"><code>        res = res.to_ary
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="801"
                  class="pre-context" id="pre-18"
                  onclick="toggle(18);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="808" class="context" id="18"
                  onclick="toggle(18);">
                <li class="context-line" id="context-18"><code>      res = catch(:halt) { instance_eval(&amp;block) }</code></li>
              </ol>

              
              <ol start="809" class="post-context"
                  id="post-18" onclick="toggle(18);">
                
                <li class="post-context-line"><code>      return if res.nil?
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      case
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_str)
</code></li>
                
                <li class="post-context-line"><code>        @response.body = [res]
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_ary)
</code></li>
                
                <li class="post-context-line"><code>        res = res.to_ary
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="637"
                  class="pre-context" id="pre-19"
                  onclick="toggle(19);">
                
                <li class="pre-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="pre-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
                <li class="pre-context-line"><code>      template_cache.clear if settings.reload_templates
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@request.route)
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@params)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @response[&#x27;Content-Type&#x27;] = nil
</code></li>
                
              </ol>
              

              <ol start="644" class="context" id="19"
                  onclick="toggle(19);">
                <li class="context-line" id="context-19"><code>      invoke { dispatch! }</code></li>
              </ol>

              
              <ol start="645" class="post-context"
                  id="post-19" onclick="toggle(19);">
                
                <li class="post-context-line"><code>      invoke { error_block!(response.status) }
</code></li>
                
                <li class="post-context-line"><code>      unless @response[&#x27;Content-Type&#x27;]
</code></li>
                
                <li class="post-context-line"><code>        if body.respond_to?(:to_ary) and body.first.respond_to? :content_type
</code></li>
                
                <li class="post-context-line"><code>          content_type body.first.content_type
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          content_type :html
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="622"
                  class="pre-context" id="pre-20"
                  onclick="toggle(20);">
                
                <li class="pre-context-line"><code>      @app = app
</code></li>
                
                <li class="pre-context-line"><code>      @template_cache = Tilt::Cache.new
</code></li>
                
                <li class="pre-context-line"><code>      yield self if block_given?
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Rack call interface.
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="629" class="context" id="20"
                  onclick="toggle(20);">
                <li class="context-line" id="context-20"><code>      dup.call!(env)</code></li>
              </ol>

              
              <ol start="630" class="post-context"
                  id="post-20" onclick="toggle(20);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    attr_accessor :env, :request, :response, :params
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def call!(env) # :nodoc:
</code></li>
                
                <li class="post-context-line"><code>      @env      = env
</code></li>
                
                <li class="post-context-line"><code>      @request  = Request.new(env)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;rack-mobile-detect-0.3.0&#x2F;lib&#x2F;rack&#x2F;mobile-detect.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="157"
                  class="pre-context" id="pre-21"
                  onclick="toggle(21);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        if redirect
</code></li>
                
                <li class="pre-context-line"><code>          path = Rack::Utils.unescape(env[&#x27;PATH_INFO&#x27;])
</code></li>
                
                <li class="pre-context-line"><code>          return [301, {&#x27;Location&#x27; =&gt; redirect}, []] if redirect &amp;&amp; path !~ &#x2F;^#{redirect}&#x2F;
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="164" class="context" id="21"
                  onclick="toggle(21);">
                <li class="context-line" id="context-21"><code>      @app.call(env)</code></li>
              </ol>

              
              <ol start="165" class="post-context"
                  id="post-21" onclick="toggle(21);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # Checks to see if any redirect options were passed in
</code></li>
                
                <li class="post-context-line"><code>    # and returns the appropriate redirect or nil (if no redirect requested)
</code></li>
                
                <li class="post-context-line"><code>    def check_for_redirect(device)
</code></li>
                
                <li class="post-context-line"><code>      # Find the device-specific redirect in the map, if exists
</code></li>
                
                <li class="post-context-line"><code>      return @redirect_map[device] if @redirect_map &amp;&amp; @redirect_map.has_key?(device)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;rack-1.4.1&#x2F;lib&#x2F;rack&#x2F;session&#x2F;abstract&#x2F;id.rb</code> in
                <code><strong>context</strong></code>
            </li>

            <li class="code system">
              
              <ol start="198"
                  class="pre-context" id="pre-22"
                  onclick="toggle(22);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        def call(env)
</code></li>
                
                <li class="pre-context-line"><code>          context(env)
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        def context(env, app=@app)
</code></li>
                
                <li class="pre-context-line"><code>          prepare_session(env)
</code></li>
                
              </ol>
              

              <ol start="205" class="context" id="22"
                  onclick="toggle(22);">
                <li class="context-line" id="context-22"><code>          status, headers, body = app.call(env)</code></li>
              </ol>

              
              <ol start="206" class="post-context"
                  id="post-22" onclick="toggle(22);">
                
                <li class="post-context-line"><code>          commit_session(env, status, headers, body)
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        private
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        def initialize_sid
</code></li>
                
                <li class="post-context-line"><code>          @sidbits = @default_options[:sidbits]
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;rack-1.4.1&#x2F;lib&#x2F;rack&#x2F;session&#x2F;abstract&#x2F;id.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="193"
                  class="pre-context" id="pre-23"
                  onclick="toggle(23);">
                
                <li class="pre-context-line"><code>          @default_options = self.class::DEFAULT_OPTIONS.merge(options)
</code></li>
                
                <li class="pre-context-line"><code>          @key = @default_options.delete(:key)
</code></li>
                
                <li class="pre-context-line"><code>          @cookie_only = @default_options.delete(:cookie_only)
</code></li>
                
                <li class="pre-context-line"><code>          initialize_sid
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        def call(env)
</code></li>
                
              </ol>
              

              <ol start="200" class="context" id="23"
                  onclick="toggle(23);">
                <li class="context-line" id="context-23"><code>          context(env)</code></li>
              </ol>

              
              <ol start="201" class="post-context"
                  id="post-23" onclick="toggle(23);">
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        def context(env, app=@app)
</code></li>
                
                <li class="post-context-line"><code>          prepare_session(env)
</code></li>
                
                <li class="post-context-line"><code>          status, headers, body = app.call(env)
</code></li>
                
                <li class="post-context-line"><code>          commit_session(env, status, headers, body)
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;1.8&#x2F;gems&#x2F;rack-1.4.1&#x2F;lib&#x2F;rack&#x2F;head.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li 
