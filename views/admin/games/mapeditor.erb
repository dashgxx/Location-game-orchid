<html>
<head>
	<title>PacMap Editor</title>
	<style type="text/css">
		body {
			padding: 0;
			margin: 0;
		}
		.coin {
			float: left;
			background: url(/img/coins-large.png) no-repeat;
			width: 18px;
			height: 18px;
			cursor: pointer;
			background-position: 0 -36px;
			margin: 3px;
		}
		.coin-20 {
			background-position: -18px -36px;
		}
		.coin-30 {
			background-position: -36px -36px;
		}
		.coin-50 {
			background-position: -54px -36px;
		}
		.coin-10.selected {
			background-position: 0 0;
		}
		.coin-20.selected {
			background-position: -18px 0;
		}
		.coin-30.selected {
			background-position: -36px 0;
		}
		.coin-50.selected {
			background-position: -54px 0;
		}
		#pointToolbar {
			background: white;
			padding: 3px;
			position: absolute;
		}
		#lineToolbar {
			position: absolute;
			top: 8px;
			left: 100px;
			background: white;
			z-index: 1000;
			border: 1px #999 solid;
			-moz-box-shadow: 2px 2px 3px #777;
			-webkit-box-shadow: 2px 2px 3px #777;
			box-shadow: 2px 2px 3px #777;
		}
	</style>
	<script src="http://code.jquery.com/jquery-1.4.2.min.js"></script>
	<script type="text/javascript" src="http://maps.google.com/maps/api/js?libraries=geometry&sensor=false"></script>
  <script type="text/javascript" src="/game-common.js"></script>
<script type="text/javascript">








var cg = {
	s: function(w,h) {
		return new google.maps.Size(w,h);
	},
	p: function(w,h) {
		return new google.maps.Point(w,h);
	}
}

var coinSpriteURL = "/img/gameboard-sprite.png";
var coinHeight = 25;
var coins = {
	10: {
		red: new google.maps.MarkerImage(coinSpriteURL, cg.s(17,17),  cg.p(0, 277), cg.p(17/2, 17/2)),
		blue: new google.maps.MarkerImage(coinSpriteURL, cg.s(17,17), cg.p(0, 301), cg.p(17/2, 17/2)),
		grey: new google.maps.MarkerImage(coinSpriteURL, cg.s(17,17), cg.p(0, 327), cg.p(17/2, 17/2))
	},
	20: {
		red: new google.maps.MarkerImage(coinSpriteURL, cg.s(19,19),  cg.p(17, 276), cg.p(19/2, 19/2)),
		blue: new google.maps.MarkerImage(coinSpriteURL, cg.s(19,19), cg.p(17, 300), cg.p(19/2, 19/2)),
		grey: new google.maps.MarkerImage(coinSpriteURL, cg.s(19,19), cg.p(17, 326), cg.p(19/2, 19/2))
	},
	30: {
		red: new google.maps.MarkerImage(coinSpriteURL, cg.s(21,21),  cg.p(36, 275), cg.p(21/2, 21/2)),
		blue: new google.maps.MarkerImage(coinSpriteURL, cg.s(21,21), cg.p(36, 299), cg.p(21/2, 21/2)),
		grey: new google.maps.MarkerImage(coinSpriteURL, cg.s(21,21), cg.p(36, 325), cg.p(21/2, 21/2))
	},
	50: {
		red: new google.maps.MarkerImage(coinSpriteURL, cg.s(25,25),  cg.p(57, 273), cg.p(25/2, 25/2)),
		blue: new google.maps.MarkerImage(coinSpriteURL, cg.s(25,25), cg.p(57, 297), cg.p(25/2, 25/2)),
		grey: new google.maps.MarkerImage(coinSpriteURL, cg.s(25,25), cg.p(57, 323), cg.p(25/2, 25/2))
	}
};

var map;
var pointEditorInfoWindow;
var pellets = {};
var activePoint;




//for bounding box
var boundingBoxes=[];
var savedBoundingBox=[];
var tempPointOne;
var tempPointTwo;


var pollutantImageURL = "/img/skull.png";
var playerIconSize = new google.maps.Size(32, 32);
var playerIconOrigin = new google.maps.Point(0,0);
var playerIconAnchor = new google.maps.Point(16, 32);	

var taskIcon1 = "/img/task_icon1.png";
var taskIcon2 =  "/img/task_icon2.png";
var taskIcon3 =  "/img/task_icon3.png";
var taskIcon4 = "/img/task_icon4.png";

var chosen_task_type;

function addTask(value) {
	
	chosen_task_type = value;
	
	
}

function addBoundingBox(){
    
    $(boundingBoxes).each(
        function(i,box){
    
            $.post("/admin/games/"+layerId+"/addBoundingBox", {
                swLatitude: box.getSouthWest().lat(),
                swLongitude: box.getSouthWest().lng(),
                neLatitude: box.getNorthEast().lat(),
                neLongitude: box.getNorthEast().lng()
            }, function(data){
                if(data.status != "ok") {
                    alert("Something went wrong! :(");
                    window.location = window.location;
                }
                else{
                     window.location = window.location;
                }
            }, "json");
    });
}

function addRadiationBits(){
    
    $(radiationBits).each(
        function(i,bit){
    
            $.post("/admin/games/"+layerId+"/addTask", {
                latitude: bit.lat(),
                longitude: bit.lng(),
                //task_type: bit. 
            }, function(data){
                if(data.status != "ok") {
                    alert("Something went wrong! :(");
                    window.location = window.location;
                }
                else{
                     window.location = window.location;
                }
            }, "json");
    });
}



function clearBoundingBox(){
    $.get("/admin/games/"+layerId+"/clearBoundingBox",
        function(data){
			if(data.status != "ok") {
				alert("Something went wrong! :(");
				window.location = window.location;
			}
            else{
                window.location.reload();
            }
		}, "json");
}

function clearRadiationBits(){
    $.get("/admin/games/"+layerId+"/clearRadiationBit",
        function(data){
			if(data.status != "ok") {
				alert("Something went wrong! :(");
				window.location = window.location;
			}
            else{
                window.location.reload();
            }
		}, "json");
}

// function receiveSavedBoundingBox(box){
//     var bounds = new google.maps.LatLngBounds();
//     var swLocation= new google.maps.LatLng(box.swLatitude,box.swLongitude);
//     var neLocation= new google.maps.LatLng(box.neLatitude,box.neLongitude);
//     var bounds= new google.maps.LatLngBounds(swLocation,neLocation);
//                     
//     var rectangle;  
//     rectangle = new google.maps.Rectangle();
//     var rectOptions = {
//             strokeColor: "#0000FF",
//             strokeOpacity: 0.8,
//             strokeWeight: 2,
//             fillColor: "#0000FF",
//             fillOpacity: 0.35,
//             map: map,
//             bounds: bounds,
//             clickable:false
//     };
//     rectangle.setOptions(rectOptions);
//     savedBoundingBox.push(rectangle);
// 
// }

function receiveRadiationBit(bit){

//TODO: add chosen_task.
	var pollutantIcon= new google.maps.MarkerImage(pollutantImageURL, playerIconSize, playerIconOrigin, playerIconAnchor);                    
    point = new google.maps.LatLng(bit.latitude,bit.longitude);
                
    	var marker = new google.maps.Marker({
                position: point,
                map: map,
                icon: pollutantIcon
        });
        
        /*var circleOptions = {
        		strokeColor: "#FFFFB3",
        		strokeOpacity: 0.8,
        		strokeWeight: 2,
        		fillColor: "#FFFFb3",
        		fillOpacity: 0.35,
        		map: map,
        		center: point,
                clickable:false,
        		radius: 120
      			};
            	new google.maps.Circle(circleOptions);
            	
            	var circleOptions = {
        		strokeColor: "#00FF00",
        		strokeOpacity: 0.8,
        		strokeWeight: 2,
        		fillColor: "#00FF00",
        		fillOpacity: 0.35,
        		map: map,
        		center: point,
                clickable:false,
        		radius: 60
      			};
            	new google.maps.Circle(circleOptions);
                
                var circleOptions = {
        		strokeColor: "#FF0000",
        		strokeOpacity: 0.8,
        		strokeWeight: 2,
        		fillColor: "#FF0000",
        		fillOpacity: 0.35,
        		map: map,
        		center: point,
                clickable:false,
        		radius: 50
      			};
            	new google.maps.Circle(circleOptions);*/
             	
        //radiationBits.push(point);     

}


var layerId = "<%= @game.layer_id %>";
var radiationBits = [];

function getTaskIcon() {

	var imageURL = ""
	if (chosen_task_type == 1) {
		imageURL = taskIcon1; 
	}
	else if (chosen_task_type == 2) {
		imageURL = taskIcon2;
	}
	else if (chosen_task_type == 3) {
		imageURL = taskIcon3;
	}
	else if (chosen_task_type == 4) {
		imageURL = taskIcon4;
	}
	
    var icon = new google.maps.MarkerImage(imageURL, playerIconSize, playerIconOrigin, playerIconAnchor);
	
	return icon;
}

function receiveBounding(data) {
	
	
	var lat_sw=52.94539363811494
	var long_sw=-1.2085589719746395
	
	var lat_se=52.94539363811494
	var long_se=-1.2144399
	
	var lat_nw=52.9491938
	var long_nw=-1.2144399
	
	var lat_ne=52.9491938
	var long_ne=-1.2085589719746395
	
	var path = [
        new google.maps.LatLng(lat_sw,long_sw),
        new google.maps.LatLng(lat_se,long_se), 
        new google.maps.LatLng(lat_nw,long_nw),
        new google.maps.LatLng(lat_ne,long_ne),
        new google.maps.LatLng(lat_sw,long_sw),
    ];
	
	var options= {
            strokeColor: "#FF0000",
            strokeOpacity: 0.8,
            strokeWeight: 2,
            path:path    
    }	
	var rect = new google.maps.Polyline();
	rect.setOptions(options);
	rect.setMap(map);
}

$(function(){

	var mapOptions = {
		zoom: 15,
		center: new google.maps.LatLng(<%= @game.latitude %>, <%= @game.longitude %>),
		mapTypeId: google.maps.MapTypeId.HYBRID, //jef
 		mapTypeControl: true
	};
	
	// Create the main map
	map = new google.maps.Map(document.getElementById("map"), mapOptions);

	// $.getJSON("/admin/games/"+layerId+"/setup.json", {
// 	}, function(data){
// 	
// 		$(data.boundingBoxes).each(function(i, box){
// 			receiveSavedBoundingBox(box);
// 		});
// 	});

	$.getJSON("/admin/games/"+layerId+"/setup.json", {
	}, function(data){
	
		/*$(data.radiationBits).each(function(i, bit){
			receiveRadiationBit(bit);
		});*/
        
        
        //
        $(data.tasks).each(function(i, bit){
			receiveRadiationBit(bit);
		});
		
		receiveBounding(data.bounding);
		
	});
	
	GameMap.fitToRadius(<%= @game.radius %>);
	
	google.maps.event.addListener(map, 'rightclick', function(event) {
                
                var taskIcon= getTaskIcon();
                tempPointOne=event.latLng;
                point = new google.maps.LatLng(tempPointOne.lat(),tempPointOne.lng());
                
                var marker = new google.maps.Marker({
                	position: point,
                	map: map,
                	icon: taskIcon
                });
                
         //        var circleOptions = {
//         		strokeColor: "#FFFFB3",
//         		strokeOpacity: 0.8,
//         		strokeWeight: 2,
//         		fillColor: "#FFFFb3",
//         		fillOpacity: 0.35,
//         		map: map,
//         		center: point,
//                 clickable:false,
//         		radius: 120
//       			};
//             	new google.maps.Circle(circleOptions);
//             	
//             	var circleOptions = {
//         		strokeColor: "#00FF00",
//         		strokeOpacity: 0.8,
//         		strokeWeight: 2,
//         		fillColor: "#00FF00",
//         		fillOpacity: 0.35,
//         		map: map,
//         		center: point,
//                 clickable:false,
//         		radius: 60
//       			};
//             	new google.maps.Circle(circleOptions);
//                 
//                 var circleOptions = {
//         		strokeColor: "#FF0000",
//         		strokeOpacity: 0.8,
//         		strokeWeight: 2,
//         		fillColor: "#FF0000",
//         		fillOpacity: 0.35,
//         		map: map,
//         		center: point,
//                 clickable:false,
//         		radius: 50
//       			};
//             	new google.maps.Circle(circleOptions);
//             	
             	
                radiationBits.push(point);     
		
		// Immediately create the pellet and open up the editor for it
		/*
		
		$.post("/admin/games/"+layerId+"/new_pellet.json", {
			points: 10,
			latitude: event.latLng.lat(),
			longitude: event.latLng.lng()
		}, function(data){
			addNewPellet(data);
			startEditingPoint(data.place_id);
		}, "json");
                */

	});
	
	// Right click context menu
	// google.maps.event.addListener(map, 'rightclick', function(event) {
//                 if (tempPointOne==null){
//                     tempPointOne=event.latLng;
//                 }
//                 else{
//                     tempPointTwo=event.latLng;
//                     //make it sw ne
//                     if(tempPointOne.lat()>tempPointTwo.lat()){
//                         var temp=tempPointOne;
//                         tempPointOne=tempPointTwo;
//                         tempPointTwo=temp;
//                        
//                     }
//                     if(tempPointOne.lng()>tempPointTwo.lng()){
//                             temp= tempPointOne.lng();
//                             tempPointOne= new google.maps.LatLng(tempPointOne.lat(),tempPointTwo.lng());
//                             tempPointTwo= new google.maps.LatLng(tempPointTwo.lat(),temp);
//                     }
//                     var bounds= new google.maps.LatLngBounds(tempPointOne,tempPointTwo);
//                     
//                     
//                     var rectangle;  
//                     rectangle = new google.maps.Rectangle();
//                     var rectOptions = {
//                         strokeColor: "#FF0000",
//                         strokeOpacity: 0.8,
//                         strokeWeight: 2,
//                         fillColor: "#FF0000",
//                         fillOpacity: 0.35,
//                         map: map,
//                         bounds: bounds,
//                         clickable:false
//                     };
//                     rectangle.setOptions(rectOptions);
//                     boundingBoxes.push(bounds);
//                     
//                     tempPointOne=null;
//                     tempPointTwo=null;
//                 }
// 		
// 		
// 		// Immediately create the pellet and open up the editor for it
// 		/*
// 		
// 		$.post("/admin/games/"+layerId+"/new_pellet.json", {
// 			points: 10,
// 			latitude: event.latLng.lat(),
// 			longitude: event.latLng.lng()
// 		}, function(data){
// 			addNewPellet(data);
// 			startEditingPoint(data.place_id);
// 		}, "json");
//                 */
// 
// 	});

	// var placeHolderMarker = new google.maps.Marker({
// 		draggable: true,
// 		raiseOnDrag: false,
// 		icon: coins[10]["grey"]
// 	});
// 	google.maps.event.addListener(placeHolderMarker, "dragend", function(event) {
// 		$("#newPointLat").val(event.latLng.lat());
// 		$("#newPointLng").val(event.latLng.lng());
// 		$("#coordinates").html(
// 			(Math.round(event.latLng.lat()*10000)/10000) + ", " + (Math.round(event.latLng.lng()*10000)/10000)
// 		);
// 	});

	pointEditorInfoWindow = new google.maps.InfoWindow({
            content: $("#pointToolbar").html(),
            maxWidth: 140
        });
        google.maps.event.addListener(pointEditorInfoWindow, "closeclick", function(){
            stopEditingPoint(activePoint);
        });

	function resizeMap() {
		$("#map").css({height: $(window).height()});
	}
	resizeMap();
	$(window).resize(resizeMap);

});


</script>
<link rel="stylesheet" href="/bootstrap.css">
</head>

<body>

	<div id="lineToolbar">
		<div style="padding: 3px;">
			<!--<input type="button" value="New Line" id="newLine" />-->
			<!--<input type="button" value="Cancel Line" id="editingCancel" disabled="disabled" />-->
          <input class="btn" type="button" value="Save" onclick="addBoundingBox();addRadiationBits()"/>
           <input class="btn" type="button" value="Clear" onclick="clearBoundingBox();clearRadiationBits()"/>
		  <input class="btn" type="button" value="Close" onclick="window.location = '/admin/games';"/>
		</div>
		
		<div style="padding: 3px;">
          <input class="btn" type="button" value="Task 1" onclick="addTask(1)"/>
          <input class="btn" type="button" value="Task 2" onclick="addTask(2)"/>
          <input class="btn" type="button" value="Task 3" onclick="addTask(3)"/>
          <input class="btn" type="button" value="Task 4" onclick="addTask(4)"/>
		</div>
		
		<div style="padding: 3px;">
          <p><h5>Instructions</h5>To place target type on map click button once and then right click on location on map.</p>
		</div>
	</div>
	

	<div style="display: none;" id="pointToolbar"><div style="width: 180px; padding-top: 10px;">

		<div style="float: right;">
			<input type="button" class="editPointDelete" style="font-size: 9pt;" value="Delete" />
		</div>

		<div class="coin coin-10 selected" id="coin-10"></div>
		<div class="coin coin-20" id="coin-20"></div>
		<div class="coin coin-30" id="coin-30"></div>
		<div class="coin coin-50" id="coin-50"></div>

		<div>
			<input type="text" class="coin_text" value="" style="width: 120px;" maxlength="140" />
			<input type="button" class="editPointSave" style="font-size: 9pt; display: none;" value="Save" />
		</div>

	</div></div>

	<div id="map" style="width: 100%; height: 600px;"></div>
	
</body>

</html>